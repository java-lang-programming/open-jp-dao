<% content_for :title do %>WanWan ドル円外貨預金元帳 csvアップロード<% end %>

<% content_for :header do %>
  <%= render "layouts/header", user: @user, notification: @notification %>
<% end %>

<% if flash[:errors].present? %>
  <ul>
    <% flash[:errors].each do |message| %>
      <li><%= message %></li>
    <% end %>
  </ul>
<% end %>


<section class="py-8">

  <div class="bg-white flex justify-center px-6 py-4">
    <%= link_to "テンプレート", apis_download_path(filename: "dollar_yen_transactions_sample.csv"), class: "border border-black text-black hover:bg-gray-100 font-bold py-2 px-4 rounded mr-2" %>
    <%= link_to "入力例", new_ledger_path, class: "hidden bg-white border border-black text-black hover:bg-gray-100 font-bold py-2 px-4 rounded" %>
  </div>

  <%= form_with(model: @import_file, url: csv_import_dollar_yen_transactions_path, data: { turbo: false }, html: { multipart: true, id: 'uploadForm' }) do |form| %>
    <%= render "shared/upload_form", form: form %>
  <% end %>

</section>

<script>
  const dropArea = document.getElementById('drop-area');
  const fileInput = document.getElementById('file-input');
  const selectedFilesList = document.getElementById('selected-files');
  const uploadButton = document.getElementById('upload-button');
  const uploadStatus = document.getElementById('upload-status');
  const fileError = document.getElementById('file-error'); // エラーメッセージ表示用の要素

  let filesToUpload = [];

  // ファイル選択時の処理
  fileInput.addEventListener('change', (e) => {
    handleFiles(e.target.files);
  });

  // ドラッグ＆ドロップ処理
  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, preventDefaults, false);
  });

  function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
  }

  ['dragenter', 'dragover'].forEach(eventName => {
    dropArea.addEventListener(eventName, () => dropArea.classList.add('border-blue-500', 'bg-blue-50'), false);
  });

  ['dragleave', 'drop'].forEach(eventName => {
    dropArea.addEventListener(eventName, () => dropArea.classList.remove('border-blue-500', 'bg-blue-50'), false);
  });

  dropArea.addEventListener('drop', (e) => {
    const dt = e.dataTransfer;
    const files = dt.files;
    handleFiles(files);
  }, false);

  // ファイルの種類をチェックするヘルパー関数
  function isCsvFile(file) {
    const validMimeTypes = [
      'text/csv',
      'application/vnd.ms-excel', // Excelで保存されたCSVの場合
      'text/plain' // 一部の環境ではtext/plainとして扱われる場合がある
    ];
    // MIMEタイプと拡張子の両方でチェック
    return validMimeTypes.includes(file.type) || file.name.toLowerCase().endsWith('.csv');
  }

  // ファイル処理ロジック
  function handleFiles(files) {
    filesToUpload = []; // アップロード対象ファイルをリセット
    selectedFilesList.innerHTML = ''; // リストをクリア
    fileError.classList.add('hidden'); // エラーメッセージを非表示にする

    const selectedFileArray = Array.from(files);
    let hasInvalidFile = false;

    if (selectedFileArray.length === 0) {
      selectedFilesList.innerHTML = '<li class="text-gray-500">ファイルが選択されていません</li>';
      return;
    }

    selectedFileArray.forEach(file => {
      const listItem = document.createElement('li');
      if (isCsvFile(file)) {
        filesToUpload.push(file); // 有効なファイルのみアップロード対象に追加
        listItem.textContent = file.name;
        listItem.classList.add('text-gray-700');
      } else {
        hasInvalidFile = true;
        listItem.textContent = `${file.name} (不正なファイル形式)`;
        listItem.classList.add('text-red-500'); // 不正なファイルは赤色で表示
      }
      selectedFilesList.appendChild(listItem);
    });

    // 不正なファイルが含まれていた場合、エラーメッセージを表示
    if (hasInvalidFile) {
      fileError.classList.remove('hidden');
      uploadButton.disabled = true; // 不正なファイルがある場合はアップロードボタンを無効化
      uploadButton.classList.add('opacity-50', 'cursor-not-allowed');
    } else {
      uploadButton.disabled = false; // 全て有効なファイルならボタンを有効化
      uploadButton.classList.remove('opacity-50', 'cursor-not-allowed');
    }

    if (filesToUpload.length === 0 && selectedFileArray.length > 0) {
      // 選択されたファイルが全て不正だった場合
      selectedFilesList.innerHTML = '<li class="text-gray-500">有効なファイルが選択されていません</li>';
    }
  }

  // アップロードボタンのクリック処理 (ダミー)
  uploadButton.addEventListener('click', () => {
    if (filesToUpload.length === 0) {
      uploadStatus.textContent = 'アップロードするCSVファイルがありません。';
      uploadStatus.className = 'mt-3 sm:mt-4 text-center text-xs sm:text-sm text-red-600';
      return;
    }

    uploadStatus.textContent = 'CSVファイルをアップロード中...';
    uploadStatus.className = 'mt-3 sm:mt-4 text-center text-xs sm:text-sm text-blue-600';

    // ここに実際のアップロード処理（例: FormDataとFetch APIを使った非同期通信）を記述
    // 例: setTimeoutでダミーのアップロード完了をシミュレート
<%#     async function postData(file) {
      const formData = new FormData();
      formData.append('file', file);
      alert('---');


      try {
        const response = await fetch('/ledgers/csv_upload', {
          method: 'POST',
          headers: {
            'X-CSRF-Token': csrfToken // ここでCSRFトークンを追加
          },
          body: formData,
        });
        if (!response.ok) {
          throw new Error('Network response was not ok ' + response.statusText);
        }
        const result = await response.json();
        console.log('Success:', result);
      } catch (error) {
        console.error('Error:', error);
      }
    } %>

    <%# postData(filesToUpload[0]); %>

<%#     setTimeout(() => {
      uploadStatus.textContent = `${filesToUpload.length}個のCSVファイルのアップロードが完了しました！`;
      uploadStatus.className = 'mt-3 sm:mt-4 text-center text-xs sm:text-sm text-green-600';
      filesToUpload = []; // アップロード後ファイルをクリア
      selectedFilesList.innerHTML = '<li class="text-gray-500">ファイルが選択されていません</li>';
      uploadButton.disabled = true; // 再度アップロードできるように初期状態に戻す
      uploadButton.classList.add('opacity-50', 'cursor-not-allowed');
    }, 2000); %>
  });
</script>